Code for Stock Movement Prediction 


Step 1: Scrape Data from Twitter
To use the Twitter API, you will need a developer account and access keys (API key, API secret, Access token, and Access token secret). Replace placeholders with your credentials.
import tweepy
import pandas as pd
from textblob import TextBlob

# Twitter API credentials
api_key = 'YOUR_API_KEY'
api_secret_key = 'YOUR_API_SECRET_KEY'
access_token = 'YOUR_ACCESS_TOKEN'
access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'

# Set up tweepy API authentication
auth = tweepy.OAuthHandler(api_key, api_secret_key)
auth.set_access_token(access_token, access_token_secret)
api = tweepy.API(auth)

# Function to scrape tweets related to stocks
def scrape_tweets(keyword, count=100):
    tweets = tweepy.Cursor(api.search_tweets, q=keyword, lang='en').items(count)
    data = {'Tweet': [], 'Sentiment': []}

    for tweet in tweets:
        analysis = TextBlob(tweet.text)
        # Use TextBlob to perform sentiment analysis
        sentiment = analysis.sentiment.polarity  # Polarity score: -1 to 1
        data['Tweet'].append(tweet.text)
        data['Sentiment'].append(sentiment)
        
    return pd.DataFrame(data)

# Example: Scrape tweets containing "Tesla"
tweets_df = scrape_tweets('Tesla', count=200)
print(tweets_df.head())



Step 2: Data Preprocessing
Clean the data to remove unnecessary characters and preprocess the text for the model input.
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer

# Clean text data
def clean_text(text):
    text = re.sub(r'http\S+', '', text)  # Remove URLs
    text = re.sub(r'[^A-Za-z0-9 ]+', '', text)  # Remove special characters
    text = text.lower()  # Convert to lowercase
    return text

tweets_df['Cleaned_Tweet'] = tweets_df['Tweet'].apply(clean_text)

# Convert text data to numerical using Bag of Words
vectorizer = CountVectorizer(max_features=1000)
X = vectorizer.fit_transform(tweets_df['Cleaned_Tweet']).toarray()

# Use sentiment as a proxy for stock movement direction
y = tweets_df['Sentiment'].apply(lambda x: 1 if x > 0 else 0)  # 1 for positive, 0 for negative

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


Step 3: Build and Train the Model
Using a simple logistic regression model for this example.
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Initialize the model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')



